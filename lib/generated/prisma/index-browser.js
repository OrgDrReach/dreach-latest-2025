
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  username: 'username',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  phone: 'phone',
  role: 'role',
  gender: 'gender',
  dob: 'dob',
  bloodGroup: 'bloodGroup',
  isActive: 'isActive',
  isVerified: 'isVerified',
  profilePic: 'profilePic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  providerType: 'providerType',
  providerId: 'providerId',
  providerAccountId: 'providerAccountId',
  refreshToken: 'refreshToken',
  accessToken: 'accessToken',
  accessTokenExpires: 'accessTokenExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  expires: 'expires',
  sessionToken: 'sessionToken',
  accessToken: 'accessToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationRequestScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  token: 'token',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  age: 'age',
  userId: 'userId',
  conditions: 'conditions',
  bloodGroup: 'bloodGroup',
  adminPanelId: 'adminPanelId'
};

exports.Prisma.AdminPanelScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissions: 'permissions',
  canManageUsers: 'canManageUsers',
  canManagePayments: 'canManagePayments',
  canManageReports: 'canManageReports'
};

exports.Prisma.SuperAdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissions: 'permissions',
  status: 'status',
  adminPanelId: 'adminPanelId'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissions: 'permissions',
  canManageProviders: 'canManageProviders',
  canViewAllTransactions: 'canViewAllTransactions',
  canViewAllAppointments: 'canViewAllAppointments',
  adminPanelId: 'adminPanelId',
  superAdminId: 'superAdminId'
};

exports.Prisma.ServiceProviderScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  name: 'name',
  age: 'age',
  dob: 'dob',
  providerType: 'providerType',
  specialization: 'specialization',
  fee: 'fee',
  experience: 'experience',
  description: 'description',
  service: 'service',
  status: 'status',
  document: 'document',
  registrationNumber: 'registrationNumber',
  clinicInfoId: 'clinicInfoId',
  adminPanelId: 'adminPanelId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serviceproviderId: 'serviceproviderId'
};

exports.Prisma.DoctorsAssistantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  assignedDoctorId: 'assignedDoctorId'
};

exports.Prisma.LabScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  servicesOffered: 'servicesOffered'
};

exports.Prisma.HospitalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  servicesOffered: 'servicesOffered'
};

exports.Prisma.NursingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  servicesOffered: 'servicesOffered'
};

exports.Prisma.AllergyScalarFieldEnum = {
  id: 'id',
  allergen: 'allergen',
  type: 'type',
  severity: 'severity',
  reaction: 'reaction',
  patientId: 'patientId'
};

exports.Prisma.MedicationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  dosage: 'dosage',
  frequency: 'frequency',
  duration: 'duration',
  status: 'status',
  prescriptionId: 'prescriptionId'
};

exports.Prisma.LabResultScalarFieldEnum = {
  id: 'id',
  testName: 'testName',
  testDate: 'testDate',
  result: 'result',
  referenceRange: 'referenceRange',
  status: 'status',
  patientId: 'patientId',
  serviceProvideId: 'serviceProvideId'
};

exports.Prisma.MedicalRecordScalarFieldEnum = {
  id: 'id',
  diagnosis: 'diagnosis',
  prescription: 'prescription',
  notes: 'notes',
  userId: 'userId',
  description: 'description',
  recordId: 'recordId',
  attachment: 'attachment',
  serviceProviderId: 'serviceProviderId'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  notes: 'notes',
  dateIssued: 'dateIssued'
};

exports.Prisma.TherapyPlanScalarFieldEnum = {
  id: 'id',
  planName: 'planName',
  date: 'date',
  type: 'type',
  status: 'status',
  details: 'details',
  patientId: 'patientId',
  serviceProvideId: 'serviceProvideId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentDate: 'paymentDate',
  refundDetails: 'refundDetails',
  userId: 'userId',
  appointmentId: 'appointmentId'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  gatewayTransactionId: 'gatewayTransactionId',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  refundDetails: 'refundDetails',
  paymentId: 'paymentId'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serviceProviderType: 'serviceProviderType',
  serviceProviderId: 'serviceProviderId',
  score: 'score',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RequestPermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  accessType: 'accessType',
  doctorsAssistantId: 'doctorsAssistantId'
};

exports.Prisma.RequestScalarFieldEnum = {
  id: 'id',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  doctorId: 'doctorId'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  service: 'service',
  status: 'status',
  appointmentTime: 'appointmentTime',
  bookedAt: 'bookedAt',
  reason: 'reason',
  isForOthers: 'isForOthers',
  slotId: 'slotId',
  userId: 'userId',
  serviceProviderId: 'serviceProviderId',
  patientId: 'patientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OthersAppointmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contact: 'contact',
  email: 'email',
  relationship: 'relationship',
  age: 'age',
  gender: 'gender',
  reason: 'reason',
  appointmentId: 'appointmentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  date: 'date',
  dayOfWeek: 'dayOfWeek',
  isRecurring: 'isRecurring',
  recurrenceType: 'recurrenceType',
  startTime: 'startTime',
  endTime: 'endTime',
  slotDuration: 'slotDuration',
  location: 'location',
  isAvailable: 'isAvailable',
  service: 'service',
  status: 'status',
  serviceProviderId: 'serviceProviderId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SlotScalarFieldEnum = {
  id: 'id',
  slotDate: 'slotDate',
  startTime: 'startTime',
  endTime: 'endTime',
  isBooked: 'isBooked',
  scheduleId: 'scheduleId',
  bookedAt: 'bookedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClinicInfoScalarFieldEnum = {
  id: 'id',
  clinicName: 'clinicName',
  addressId: 'addressId',
  phone: 'phone',
  images: 'images',
  scheduleId: 'scheduleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  pincode: 'pincode',
  userId: 'userId'
};

exports.Prisma.EducationScalarFieldEnum = {
  id: 'id',
  university: 'university',
  degree: 'degree',
  duration: 'duration',
  serviceProviderId: 'serviceProviderId'
};

exports.Prisma.WorkExperienceScalarFieldEnum = {
  id: 'id',
  clinic: 'clinic',
  duration: 'duration',
  serviceProviderId: 'serviceProviderId'
};

exports.Prisma.AwardScalarFieldEnum = {
  id: 'id',
  date: 'date',
  title: 'title',
  description: 'description',
  serviceProviderId: 'serviceProviderId'
};

exports.Prisma.CurrentLocationScalarFieldEnum = {
  id: 'id',
  lat: 'lat',
  long: 'long',
  appointmentId: 'appointmentId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  entity: 'entity',
  entityId: 'entityId',
  actionType: 'actionType',
  status: 'status',
  ipAddress: 'ipAddress',
  device: 'device',
  performedBy: 'performedBy',
  timestamp: 'timestamp',
  userId: 'userId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  message: 'message',
  type: 'type',
  priority: 'priority',
  isRead: 'isRead',
  expiresAt: 'expiresAt',
  isRecurring: 'isRecurring',
  groupId: 'groupId',
  createdAt: 'createdAt',
  relatedEntityId: 'relatedEntityId',
  relatedEntity: 'relatedEntity'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  Patient: 'Patient',
  SuperAdmin: 'SuperAdmin',
  Admin: 'Admin',
  Doctor: 'Doctor',
  Hospital: 'Hospital',
  Lab: 'Lab',
  Nursing: 'Nursing',
  DoctorsAssistant: 'DoctorsAssistant'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.BloodGroup = exports.$Enums.BloodGroup = {
  A_POSITIVE: 'A_POSITIVE',
  A_NEGATIVE: 'A_NEGATIVE',
  B_POSITIVE: 'B_POSITIVE',
  B_NEGATIVE: 'B_NEGATIVE',
  O_POSITIVE: 'O_POSITIVE',
  O_NEGATIVE: 'O_NEGATIVE',
  AB_POSITIVE: 'AB_POSITIVE',
  AB_NEGATIVE: 'AB_NEGATIVE'
};

exports.ActionType = exports.$Enums.ActionType = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  VIEW: 'VIEW'
};

exports.Status = exports.$Enums.Status = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BLOCKED: 'BLOCKED',
  DELETED: 'DELETED',
  ARCHIVED: 'ARCHIVED',
  SUSPENDED: 'SUSPENDED',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED',
  INITIATED: 'INITIATED',
  PAID: 'PAID',
  REFUNDED: 'REFUNDED',
  FAILED: 'FAILED',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED'
};

exports.ProviderType = exports.$Enums.ProviderType = {
  Doctor: 'Doctor',
  Hospital: 'Hospital',
  Lab: 'Lab',
  Nursing: 'Nursing',
  DoctorsAssistant: 'DoctorsAssistant'
};

exports.Service = exports.$Enums.Service = {
  HomeCare: 'HomeCare',
  VideoConsultation: 'VideoConsultation',
  OndeskAppointment: 'OndeskAppointment',
  IntegratedCare: 'IntegratedCare',
  CollaborativeCare: 'CollaborativeCare',
  LabTest: 'LabTest'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  UPI: 'UPI',
  CARD: 'CARD',
  NET_BANKING: 'NET_BANKING',
  CASH: 'CASH',
  WALLET: 'WALLET'
};

exports.PermissionType = exports.$Enums.PermissionType = {
  ACCEPT: 'ACCEPT',
  REJECT: 'REJECT',
  PENDING: 'PENDING',
  VIEW: 'VIEW',
  EDIT: 'EDIT',
  DELETE: 'DELETE',
  CREATE: 'CREATE',
  UPDATE: 'UPDATE'
};

exports.WeekDay = exports.$Enums.WeekDay = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

exports.RecurrenceType = exports.$Enums.RecurrenceType = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationRequest: 'VerificationRequest',
  Patient: 'Patient',
  AdminPanel: 'AdminPanel',
  SuperAdmin: 'SuperAdmin',
  Admin: 'Admin',
  ServiceProvider: 'ServiceProvider',
  Doctor: 'Doctor',
  DoctorsAssistant: 'DoctorsAssistant',
  Lab: 'Lab',
  Hospital: 'Hospital',
  Nursing: 'Nursing',
  Allergy: 'Allergy',
  Medication: 'Medication',
  LabResult: 'LabResult',
  MedicalRecord: 'MedicalRecord',
  Prescription: 'Prescription',
  TherapyPlan: 'TherapyPlan',
  Payment: 'Payment',
  Transaction: 'Transaction',
  Rating: 'Rating',
  RequestPermission: 'RequestPermission',
  Request: 'Request',
  Appointment: 'Appointment',
  OthersAppointment: 'OthersAppointment',
  Schedule: 'Schedule',
  Slot: 'Slot',
  ClinicInfo: 'ClinicInfo',
  Address: 'Address',
  Education: 'Education',
  WorkExperience: 'WorkExperience',
  Award: 'Award',
  CurrentLocation: 'CurrentLocation',
  AuditLog: 'AuditLog',
  Notification: 'Notification',
  Tag: 'Tag'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
